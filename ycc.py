B=[[0, 139.58500816993464], [2, 135.17460317460316], [12, 121.20745614035087], [14, 118.80348699763593], [16, 124.88591269841268], [23, 101.625], [34, 122.70343691148774], [37, 122.65383597883597], [37, 121.4718253968254], [38, 125.73174603174604], [65, 120.69801051051051], [66, 122.12916666666666], [66, 118.89756944444444], [66, 123.62676151761518], [74, 135.0339924670433], [76, 122.08343253968253], [77, 129.09722222222223], [78, 119.7611111111111], [78, 114.39087301587301], [80, 121.1595238095238], [94, 125.31935185185185], [102, 119.35851851851852], [104, 121.00357142857142], [104, 132.3161111111111], [105, 121.2093537414966], [109, 124.27175368139223], [110, 121.53224776500637], [111, 132.0371376811594], [112, 116.94537037037037], [137, 122.05166666666668], [138, 121.51831275720164], [141, 121.7845785440613], [145, 120.6988425925926], [145, 111.56222222222223], [147, 120.72619047619048], [149, 127.61327160493828], [151, 121.92356902356903], [153, 121.47435897435898], [154, 121.45224867724866], [156, 127.8125], [169, 121.27392361111112], [176, 119.47222222222223], [176, 123.67857142857144], [179, 116.83333333333334], [186, 127.71825396825395], [188, 119.43939393939394], [192, 119.76315789473685], [193, 124.3530753968254], [195, 118.71395202020203], [200, 122.07037037037037], [206, 123.91666666666667], [210, 127.05555555555556], [210, 107.79166666666667], [210, 122.11011904761905], [227, 127.4433080808081], [229, 124.5358695652174], [230, 128.11538461538464], [231, 134.64553140096618], [233, 113.24242424242425], [233, 122.94583333333334], [239, 118.08313008130082], [239, 123.8154761904762], [240, 122.703216374269], [241, 129.3888888888889], [242, 119.01057347670252], [242, 115.87760416666667], [242, 127.62777777777778], [243, 126.43518518518519], [245, 127.24074074074075], [245, 123.85314009661835], [248, 121.07759661835746], [248, 126.8800925925926], [249, 121.07729468599032], [255, 124.91145833333333], [255, 127.67000000000002], [257, 125.17307692307693], [257, 124.41417910447761], [262, 117.57999999999998], [262, 118.640625], [263, 123.49166666666665], [264, 107.55208333333334], [265, 100.78846153846155], [265, 121.46723163841807], [268, 113.45833333333333], [269, 129.05], [269, 118.10416666666667], [270, 117.54166666666666], [271, 122.2116402116402], [272, 127.26960784313725], [272, 124.67647058823529], [273, 122.08333333333334], [275, 128.84444444444446], [276, 117.93333333333334], [281, 116.30729166666667], [281, 116.8346590909091], [283, 118.25238095238095], [285, 124.63323412698414], [286, 126.68333333333334], [287, 127.46020531400966], [290, 126.32575757575758], [291, 119.92708333333333], [291, 121.7437037037037], [291, 105.77083333333333], [291, 106.6388888888889], [291, 113.5625], [291, 122.50378787878788], [292, 119.28070175438597], [300, 121.88939393939394], [302, 125.26315789473685], [303, 120.357890070922], [304, 122.45243484224966], [305, 121.1256830601093], [306, 121.46052631578948], [307, 124.2953216374269], [307, 117.0], [308, 119.54656862745097], [308, 122.87295081967213], [310, 114.32142857142858], [310, 125.75735294117648], [311, 117.19696969696969], [313, 120.81319444444445], [313, 120.50666666666666], [314, 122.07539682539684], [314, 122.12715643274854], [316, 121.80694444444444], [319, 120.91666666666667], [328, 119.66653439153438], [342, 102.91666666666669], [353, 119.00757575757575], [354, 120.57945736434108], [356, 117.07550505050504], [357, 116.86381944444446], [357, 117.73039215686275], [357, 120.01785714285715], [358, 126.95], [359, 116.90277777777779], [362, 119.34820261437908], [363, 113.125], [365, 117.13287037037037], [366, 110.13636363636364], [366, 136.8028959810875], [367, 120.62708333333333], [367, 123.20555555555556], [369, 118.53720238095237], [370, 116.8010101010101], [374, 118.12310606060606], [408, 118.7235294117647], [410, 120.33848039215685], [411, 102.63148148148149], [412, 117.12606837606839], [413, 119.80492424242425], [413, 118.93813131313131], [414, 118.03993055555557], [414, 121.3138888888889], [415, 122.27412280701755], [418, 121.47916666666667], [419, 119.4430894308943], [420, 121.74561403508773], [420, 115.60383986928103], [421, 113.57051282051285], [422, 124.28125], [423, 115.76016260162602], [423, 120.78758169934639], [424, 116.59325396825396], [424, 116.48160173160173], [425, 114.55844444444445], [425, 118.85317460317461], [427, 116.875], [428, 118.53875968992247], [428, 116.94134920634922], [429, 116.49999999999999], [430, 117.244708994709], [430, 119.06981981981983], [431, 118.06557377049181], [433, 124.79861111111111], [434, 117.46038251366119], [435, 116.79255319148935], [435, 117.82539682539684], [436, 116.80448717948718], [441, 117.32995495495496], [441, 117.57317073170732], [442, 117.36500000000001], [442, 117.31060606060606], [443, 116.4541087962963], [443, 116.15598290598291], [444, 116.98333333333332], [445, 116.49425287356321], [446, 117.45075757575756], [447, 116.57225877192982], [447, 119.23651960784312], [448, 116.75972222222221], [449, 120.9320987654321], [449, 115.63617886178862], [450, 117.92532467532467], [451, 117.98857012750457], [456, 117.85666666666665], [460, 126.11333333333334], [461, 115.18821839080461], [464, 115.23474178403757], [468, 116.09631147540983], [470, 116.72580645161291], [492, 113.925], [493, 116.3598484848485], [494, 116.70899470899471], [494, 112.92741935483872], [494, 111.51219512195121], [495, 114.02880658436214], [496, 116.8357843137255], [496, 114.84356725146199], [497, 115.35104166666667], [498, 117.45350877192983], [498, 118.17117604617606], [499, 116.27966101694915], [500, 118.66883116883116], [500, 116.87962962962963], [501, 118.52083333333333], [502, 116.0396174863388], [503, 115.03589743589744], [504, 116.23350694444446], [505, 112.35795454545455], [505, 116.15], [506, 116.38265306122449], [507, 126.77911646586345], [507, 115.37893081761005], [508, 114.53], [508, 117.19220085470086], [509, 118.1904761904762], [511, 117.46433333333331], [511, 115.77582159624413], [512, 114.21464646464648], [512, 114.72510822510822], [514, 117.56666666666666], [515, 119.15885416666667], [515, 115.9095744680851], [516, 117.23333333333332], [517, 114.86210317460318], [517, 113.54885057471265], [518, 116.89848484848486], [519, 115.93913857677903], [519, 115.30492424242424], [520, 120.46544715447155], [521, 112.41489197530865], [521, 114.74375], [522, 118.96780303030305], [522, 116.65625], [523, 116.01428571428572], [524, 114.39149305555557], [524, 114.02287581699346], [525, 113.78835978835978], [526, 117.00234741784038], [526, 120.71458333333334], [527, 116.1441798941799], [529, 116.2940476190476], [530, 115.98541666666665], [531, 115.22916666666666], [531, 117.08333333333331], [532, 115.96079234972677], [533, 115.42959770114942], [533, 115.9128787878788], [534, 116.53061224489797], [534, 116.96837301587301], [535, 114.88661202185793], [536, 118.31547619047619], [537, 114.54282407407408], [537, 116.78086419753086], [538, 116.17171717171716], [538, 114.14802631578948], [539, 116.63963963963964], [539, 110.84496124031007], [540, 118.92283950617283], [543, 116.42816091954023], [543, 115.30625]]
bt=[] #时间
bc=[] #时间对应的容量

for i in range(len(B)):
    bt.append(B[i][0])
    bc.append(B[i][1]) 
#    bc.append(B[i][1]/B[0][1])    

print(len(B))
#print(bt)



import numpy as np
from matplotlib import pyplot as plt
import matplotlib

#coding:utf-8

plt.rcParams['font.sans-serif']=['Times New Roman'] #用来正常显示中文标签

"""
以下工作将bc中所有的数据均匀的分成了n组，每一组有nn个数据，最后一组的数据补充完整，和其他组不同，将分组的结果保存在了bbc列表中
"""
n = 6
nn = len(B)//n
bbc = [] #建立了一个将bc均匀划分为了n个子列表的嵌套列表
for i in range(n):
    if i == n - 1:
        ls = bc[nn*i: ]
        bbc.append(ls)
    else:
        ls = bc[nn*i:nn*(i+1)]
        bbc.append(ls)

#print(len(bbc))    

"""
以下循环得到了每一段的第1,2,3四分位数，放在在列表quantile中 
"""

quantile = [] #定义了一个记录上下四分位数的列表，每一组在该列表中记录一次四分位数
for i in range(n):
     q1 = np.percentile( bbc[i], (25) ) #下四分位数
     q2 = np.percentile( bbc[i], (50) ) #平均数
     q3 = np.percentile( bbc[i], (75) ) #上四分位数
     ls = [q1,q2,q3]
     quantile.append(ls)
#print(quantile)     

"""
以下工作利用得到的四分位数，将离群点去除，将最后的结果保存到了列表bt1和bc1中
"""   
bt1 = []
bc1 = []#用于保存去除列群点后的结果
k = 1.7

for i in range(len(B)):
    j = i//nn
    if j == n:
        iqr = quantile[j-1][2] - quantile[j-1][0] 
        up = quantile[j-1][2] + k*iqr   
        down = quantile[j-1][0] - k*iqr   
        if bc[i] < up and bc[i] > down:
            bc1.append(bc[i])
            bt1.append(bt[i])
    else:
        iqr = quantile[j][2] - quantile[j][0] 
        up = quantile[n-1][2] + k*iqr   
        down = quantile[n-1][0] - k*iqr   
        if bc[i] < up and bc[i] > down:
            bc1.append(bc[i])
            bt1.append(bt[i])
            
print(len(bc1))

"""
 以下工作作出了关于去除离散点前后的散点图
 bc2：百分比表示的电池容量
"""   
font={'family':'SimHei','style':'italic','weight':'heavy','size':8}

fig,ax= plt.subplots(figsize=(4,4),facecolor='w',dpi=400) 
ax.set_ylim(0,250)
s=15
l1 = ax.scatter(bt,bc,s,c="r",marker='.')
l2 = ax.scatter(bt1,bc1,s,marker='.',c="black")

ax.tick_params(axis='both',color='black',length=3,direction='out')#控制坐标轴刻度显示属性
plt.setp(ax.get_xticklabels(),weight='bold',size=7,style='italic',color='black') #改变ax1实例x轴刻度的大小
plt.setp(ax.get_yticklabels(),weight='bold',size=7,style='italic',color='black') #改变ax1实例x轴刻度的大小


plt.legend(handles=[l1,l2],labels=['outlier','good'],prop={'style':'italic','weight':'heavy','size':8},loc='best',edgecolor = 'b')#设置标签的格式

ax.set_ylabel('电池容量/kwh',fontdict=font) #或者plt.ylabel('Scores')
ax.set_xlabel('时间/天',fontdict=font) #或者plt.ylabel('Scores')
plt.savefig("cat")
#ax.set_title('map',fontdict=font)


"""
 以下工作作出了关于去除离散点后的散点图按照百分比
"""   
font={'family':'SimHei','style':'italic','weight':'heavy','size':8}

fig,ax= plt.subplots(figsize=(4,4),facecolor='w',dpi=400) 
ax.set_ylim(0,1.2)
bc2 = [bc1[i]/quantile[0][2] for i in range(len(bc1))]

ax.scatter(bt1,bc2,s=8,marker='.',c="b")

ax.tick_params(axis='both',color='black',length=3,direction='out')#控制坐标轴刻度显示属性
plt.setp(ax.get_xticklabels(),weight='bold',size=7,style='italic',color='black') #改变ax1实例x轴刻度的大小
plt.setp(ax.get_yticklabels(),weight='bold',size=7,style='italic',color='black') #改变ax1实例x轴刻度的大小

ax.set_ylabel('电池容量健康状态',fontdict=font) #或者plt.ylabel('Scores')
ax.set_xlabel('时间/天',fontdict=font) #或者plt.ylabel('Scores')
plt.savefig("cat2")
#ax.set_title('map',fontdict=font)


"""
 以下工作对bt1,bc2做线性拟合
""" 
from numpy import polyfit, poly1d
coeff = polyfit(bt1, bc2, 1) #求出线性拟合系数
print(coeff)
font={'family':'SimHei','style':'italic','weight':'heavy','size':8}

fig,ax= plt.subplots(figsize=(4,4),facecolor='w',dpi=400) 
ax.set_ylim(0,1.2)

l1,  = ax.plot(bt1,bc2,markersize=3,c="r",marker='.',linewidth=0)
bt2 = np.array(bt1) # 将列表转化为numpy矩阵
l2,  = ax.plot(bt2, coeff[0] * bt2 + coeff[1], 'b-')

ax.tick_params(axis='both',color='black',length=3,direction='out')#控制坐标轴刻度显示属性
plt.setp(ax.get_xticklabels(),weight='bold',size=7,style='italic',color='black') #改变ax1实例x轴刻度的大小
plt.setp(ax.get_yticklabels(),weight='bold',size=7,style='italic',color='black') #改变ax1实例x轴刻度的大小

plt.rcParams['font.sans-serif']=['SimHei'] 
plt.legend(handles=[l1,l2],labels=["电池健康状态","线性拟,合曲线"],prop={'style':'italic','weight':'heavy','size':8},loc='best',edgecolor = 'b')#设置标签的格式

ax.set_ylabel('电池健康状态',fontdict=font) #或者plt.ylabel('Scores')
ax.set_xlabel('时间/天',fontdict=font) #或者plt.ylabel('Scores')
plt.savefig("cat3")

"""
以下工作可以作箱线图，共计画n个
""" 
fig,ax = plt.subplots(figsize=(4,4),facecolor='w',dpi=200) #只有这样才能指定ax实例，可以用面向对象的函数
bplot = plt.boxplot(bbc,#数据，两组，两个list
          whis = 1.5, #控制箱线图内外限
          widths = 0.5,#此处，控制箱线图的宽度
          sym = '*',#超出内外限的点的标记
          #labels = labels,#横轴标签
          patch_artist = True,#是否对箱体着色
          boxprops = {'color':'black'},#箱线的font字典
          medianprops= {'color':'black'},#中位线的font字典
          flierprops= {'color':'r','linewidth':2},
          )

###设置xy轴标签和轴属性
ax.tick_params(axis='both',color='black',length=3,direction='out')#控制坐标轴刻度显示属性

plt.setp(ax.get_xticklabels(),weight='bold',size=7,style='italic',color='darkred') #改变ax1实例x轴刻度的大小
plt.setp(ax.get_yticklabels(),weight='bold',size=7,style='italic',color='darkred') #
ax.set_ylabel('电池容量',fontdict=font) #或者plt.ylabel('Scores')
ax.set_xlabel('分组',fontdict=font) #或者plt.ylabel('Scores')
plt.savefig("cat4")

plt.show() #在vscode中必须加show函数，否则图片不会显示出来
